package io.quarkiverse.tekton.cli.pipeline;

import java.util.*;

import io.fabric8.kubernetes.api.model.HasMetadata;
import io.fabric8.tekton.v1.Param;
import io.fabric8.tekton.v1.PipelineRun;
import io.quarkiverse.tekton.cli.common.Clients;
import io.quarkiverse.tekton.cli.common.PipelineRuns;
import io.quarkiverse.tekton.common.utils.Params;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;
import picocli.CommandLine.Unmatched;

@Command(name = "exec", header = "Execute Tekton pipeline.")
public class PipelineExec extends AbstractPipelineCommand {

    @Parameters(index = "0", paramLabel = "PIPELINE", description = "Pipeline name.")
    String pipelineName;

    @Option(names = { "-r", "--regenerate" }, description = "Regenerate and reinstall the pipeline.")
    boolean regenerate = false;

    @Unmatched
    private List<String> pipelineArgs = new ArrayList<>();

    @Override
    public boolean shouldOverwrite() {
        return regenerate;
    }

    @Override
    public void process(List<HasMetadata> resources) {
        readInstalledPipelines();
        readProjectPipelines(resources);

        if (regenerate) {
            getProjectPipeline(pipelineName).ifPresentOrElse(t -> {
                Clients.kubernetes().resource(t).serverSideApply();
                if (t instanceof io.fabric8.tekton.v1beta1.Pipeline v1beta1Pipeline) {
                    addInstalledPipeline(v1beta1Pipeline);
                }
                if (t instanceof io.fabric8.tekton.v1.Pipeline v1Pipeline) {
                    addInstalledPipeline(v1Pipeline);
                }
            }, () -> {
                throw new IllegalArgumentException("Failed to regenerate/reinstall Pipeline " + pipelineName + ".");
            });
        }

        if (!isInstalled(pipelineName)) {
            if (isProject(pipelineName)) {
                output.err().println("Pipeline " + pipelineName
                        + " not installed, but its available in the project. You can retry after installing it.");
            } else {
                output.err().println("Pipeline " + pipelineName + " not installed.");
            }
            return;
        } else {
            output.out().println("Executing Pipeline: " + pipelineName);
            HasMetadata t = getInstalledPipeline(pipelineName).get();

            // Get the PipelineRun generated by the TektonProcessor
            PipelineRun pipelineRun = resources.stream()
                    .filter(PipelineRun.class::isInstance)
                    .map(PipelineRun.class::cast)
                    .findFirst()
                    .orElseThrow(() -> new IllegalStateException("No PipelineRun found"));

            // Convert the arguments passed by the CLI command as List<String> into a Map<String,String> where the key is equal to the left part of key=val
            List<Param> params = Params.create(pipelineArgs);

            pipelineRun.getSpec().setParams(params);

            if (Clients.kubernetes().resource(pipelineRun).get() != null) {
                Clients.kubernetes().resource(pipelineRun).delete();
            }

            pipelineRun = Clients.kubernetes().resource(pipelineRun).serverSideApply();
            output.out().printf("Created PipelineRun %s.\n", pipelineRun.getMetadata().getName());
            PipelineRuns.waitUntilReady(pipelineRun.getMetadata().getName());
            PipelineRuns.log(pipelineRun.getMetadata().getName());
            return;
        }
    }
}
